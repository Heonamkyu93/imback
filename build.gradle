plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.refore'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

ext {
	queryDslVersion = "5.0.0"
}

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.modelmapper:modelmapper:3.2.0'
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation "com.querydsl:querydsl-jpa:$queryDslVersion:jakarta"
	implementation "com.querydsl:querydsl-core:$queryDslVersion"
	annotationProcessor "com.querydsl:querydsl-apt:$queryDslVersion:jakarta"
	implementation "com.querydsl:querydsl-codegen:$queryDslVersion"
	implementation 'com.querydsl:querydsl-sql:5.0.0'


	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'




	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
	source = file(querydslDir)
}

compileQuerydsl.doFirst {
	if (file(querydslDir).exists())
		delete(file(querydslDir))
}

tasks.named('test') {
	useJUnitPlatform()
}
